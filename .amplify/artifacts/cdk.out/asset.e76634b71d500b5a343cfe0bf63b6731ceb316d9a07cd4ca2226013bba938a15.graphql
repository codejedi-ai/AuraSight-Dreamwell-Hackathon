type User @aws_cognito_user_pools @aws_iam {
  email: String!
  firstName: String
  lastName: String
  accountType: UserAccountType
  displayName: String
  bio: String
  location: String
  website: String
  companyName: String
  industry: String
  companySize: String
  brandValues: String
  missionStatement: String
  targetAudience: String
  platforms: String
  followerCount: String
  contentCategories: String
  personalValues: String
  contentStyle: String
  audienceAge: String
  audienceGender: String
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

type Profile @aws_cognito_user_pools @aws_iam {
  userId: String!
  displayName: String!
  bio: String
  location: String
  website: String
  accountType: ProfileAccountType
  companyName: String
  industry: String
  companySize: String
  brandValues: String
  missionStatement: String
  targetAudience: String
  platforms: String
  followerCount: String
  contentCategories: String
  personalValues: String
  contentStyle: String
  audienceAge: String
  audienceGender: String
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

type MatchRequest @aws_cognito_user_pools @aws_iam {
  userId: String!
  brand: String!
  influencer: String!
  brandValues: String
  missionStatement: String
  targetEmotion: String
  status: MatchRequestStatus
  results: String
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

enum UserAccountType {
  brand
  influencer
}

enum ProfileAccountType {
  brand
  influencer
}

enum MatchRequestStatus {
  pending
  processing
  completed
  failed
}

input AmplifyAIConversationTurnErrorInput {
  errorType: String!
  message: String!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUserConnection @aws_cognito_user_pools @aws_iam {
  items: [User]!
  nextToken: String
}

input ModelUserAccountTypeInput {
  eq: UserAccountType
  ne: UserAccountType
}

input ModelUserFilterInput {
  email: ModelStringInput
  firstName: ModelStringInput
  lastName: ModelStringInput
  accountType: ModelUserAccountTypeInput
  displayName: ModelStringInput
  bio: ModelStringInput
  location: ModelStringInput
  website: ModelStringInput
  companyName: ModelStringInput
  industry: ModelStringInput
  companySize: ModelStringInput
  brandValues: ModelStringInput
  missionStatement: ModelStringInput
  targetAudience: ModelStringInput
  platforms: ModelStringInput
  followerCount: ModelStringInput
  contentCategories: ModelStringInput
  personalValues: ModelStringInput
  contentStyle: ModelStringInput
  audienceAge: ModelStringInput
  audienceGender: ModelStringInput
  id: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
  owner: ModelStringInput
}

type Query {
  getUser(id: ID!): User @aws_cognito_user_pools @aws_iam
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection @aws_cognito_user_pools @aws_iam
  getProfile(id: ID!): Profile @aws_cognito_user_pools @aws_iam
  listProfiles(filter: ModelProfileFilterInput, limit: Int, nextToken: String): ModelProfileConnection @aws_cognito_user_pools @aws_iam
  getMatchRequest(id: ID!): MatchRequest @aws_cognito_user_pools @aws_iam
  listMatchRequests(filter: ModelMatchRequestFilterInput, limit: Int, nextToken: String): ModelMatchRequestConnection @aws_cognito_user_pools @aws_iam
}

input ModelUserConditionInput {
  email: ModelStringInput
  firstName: ModelStringInput
  lastName: ModelStringInput
  accountType: ModelUserAccountTypeInput
  displayName: ModelStringInput
  bio: ModelStringInput
  location: ModelStringInput
  website: ModelStringInput
  companyName: ModelStringInput
  industry: ModelStringInput
  companySize: ModelStringInput
  brandValues: ModelStringInput
  missionStatement: ModelStringInput
  targetAudience: ModelStringInput
  platforms: ModelStringInput
  followerCount: ModelStringInput
  contentCategories: ModelStringInput
  personalValues: ModelStringInput
  contentStyle: ModelStringInput
  audienceAge: ModelStringInput
  audienceGender: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  owner: ModelStringInput
}

input CreateUserInput {
  email: String!
  firstName: String
  lastName: String
  accountType: UserAccountType
  displayName: String
  bio: String
  location: String
  website: String
  companyName: String
  industry: String
  companySize: String
  brandValues: String
  missionStatement: String
  targetAudience: String
  platforms: String
  followerCount: String
  contentCategories: String
  personalValues: String
  contentStyle: String
  audienceAge: String
  audienceGender: String
  id: ID
}

input UpdateUserInput {
  email: String
  firstName: String
  lastName: String
  accountType: UserAccountType
  displayName: String
  bio: String
  location: String
  website: String
  companyName: String
  industry: String
  companySize: String
  brandValues: String
  missionStatement: String
  targetAudience: String
  platforms: String
  followerCount: String
  contentCategories: String
  personalValues: String
  contentStyle: String
  audienceAge: String
  audienceGender: String
  id: ID!
}

input DeleteUserInput {
  id: ID!
}

type Mutation {
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User @aws_cognito_user_pools @aws_iam
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User @aws_cognito_user_pools @aws_iam
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User @aws_cognito_user_pools @aws_iam
  createProfile(input: CreateProfileInput!, condition: ModelProfileConditionInput): Profile @aws_cognito_user_pools @aws_iam
  updateProfile(input: UpdateProfileInput!, condition: ModelProfileConditionInput): Profile @aws_cognito_user_pools @aws_iam
  deleteProfile(input: DeleteProfileInput!, condition: ModelProfileConditionInput): Profile @aws_cognito_user_pools @aws_iam
  createMatchRequest(input: CreateMatchRequestInput!, condition: ModelMatchRequestConditionInput): MatchRequest @aws_cognito_user_pools @aws_iam
  updateMatchRequest(input: UpdateMatchRequestInput!, condition: ModelMatchRequestConditionInput): MatchRequest @aws_cognito_user_pools @aws_iam
  deleteMatchRequest(input: DeleteMatchRequestInput!, condition: ModelMatchRequestConditionInput): MatchRequest @aws_cognito_user_pools @aws_iam
}

input ModelSubscriptionUserFilterInput {
  email: ModelSubscriptionStringInput
  firstName: ModelSubscriptionStringInput
  lastName: ModelSubscriptionStringInput
  accountType: ModelSubscriptionStringInput
  displayName: ModelSubscriptionStringInput
  bio: ModelSubscriptionStringInput
  location: ModelSubscriptionStringInput
  website: ModelSubscriptionStringInput
  companyName: ModelSubscriptionStringInput
  industry: ModelSubscriptionStringInput
  companySize: ModelSubscriptionStringInput
  brandValues: ModelSubscriptionStringInput
  missionStatement: ModelSubscriptionStringInput
  targetAudience: ModelSubscriptionStringInput
  platforms: ModelSubscriptionStringInput
  followerCount: ModelSubscriptionStringInput
  contentCategories: ModelSubscriptionStringInput
  personalValues: ModelSubscriptionStringInput
  contentStyle: ModelSubscriptionStringInput
  audienceAge: ModelSubscriptionStringInput
  audienceGender: ModelSubscriptionStringInput
  id: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionUserFilterInput]
  or: [ModelSubscriptionUserFilterInput]
  owner: ModelStringInput
}

type Subscription {
  onCreateUser(filter: ModelSubscriptionUserFilterInput, owner: String): User @aws_subscribe(mutations: ["createUser"]) @aws_cognito_user_pools @aws_iam
  onUpdateUser(filter: ModelSubscriptionUserFilterInput, owner: String): User @aws_subscribe(mutations: ["updateUser"]) @aws_cognito_user_pools @aws_iam
  onDeleteUser(filter: ModelSubscriptionUserFilterInput, owner: String): User @aws_subscribe(mutations: ["deleteUser"]) @aws_cognito_user_pools @aws_iam
  onCreateProfile(filter: ModelSubscriptionProfileFilterInput, owner: String): Profile @aws_subscribe(mutations: ["createProfile"]) @aws_cognito_user_pools @aws_iam
  onUpdateProfile(filter: ModelSubscriptionProfileFilterInput, owner: String): Profile @aws_subscribe(mutations: ["updateProfile"]) @aws_cognito_user_pools @aws_iam
  onDeleteProfile(filter: ModelSubscriptionProfileFilterInput, owner: String): Profile @aws_subscribe(mutations: ["deleteProfile"]) @aws_cognito_user_pools @aws_iam
  onCreateMatchRequest(filter: ModelSubscriptionMatchRequestFilterInput, owner: String): MatchRequest @aws_subscribe(mutations: ["createMatchRequest"]) @aws_cognito_user_pools @aws_iam
  onUpdateMatchRequest(filter: ModelSubscriptionMatchRequestFilterInput, owner: String): MatchRequest @aws_subscribe(mutations: ["updateMatchRequest"]) @aws_cognito_user_pools @aws_iam
  onDeleteMatchRequest(filter: ModelSubscriptionMatchRequestFilterInput, owner: String): MatchRequest @aws_subscribe(mutations: ["deleteMatchRequest"]) @aws_cognito_user_pools @aws_iam
}

type ModelProfileConnection @aws_cognito_user_pools @aws_iam {
  items: [Profile]!
  nextToken: String
}

input ModelProfileAccountTypeInput {
  eq: ProfileAccountType
  ne: ProfileAccountType
}

input ModelProfileFilterInput {
  userId: ModelStringInput
  displayName: ModelStringInput
  bio: ModelStringInput
  location: ModelStringInput
  website: ModelStringInput
  accountType: ModelProfileAccountTypeInput
  companyName: ModelStringInput
  industry: ModelStringInput
  companySize: ModelStringInput
  brandValues: ModelStringInput
  missionStatement: ModelStringInput
  targetAudience: ModelStringInput
  platforms: ModelStringInput
  followerCount: ModelStringInput
  contentCategories: ModelStringInput
  personalValues: ModelStringInput
  contentStyle: ModelStringInput
  audienceAge: ModelStringInput
  audienceGender: ModelStringInput
  id: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelProfileFilterInput]
  or: [ModelProfileFilterInput]
  not: ModelProfileFilterInput
  owner: ModelStringInput
}

input ModelProfileConditionInput {
  userId: ModelStringInput
  displayName: ModelStringInput
  bio: ModelStringInput
  location: ModelStringInput
  website: ModelStringInput
  accountType: ModelProfileAccountTypeInput
  companyName: ModelStringInput
  industry: ModelStringInput
  companySize: ModelStringInput
  brandValues: ModelStringInput
  missionStatement: ModelStringInput
  targetAudience: ModelStringInput
  platforms: ModelStringInput
  followerCount: ModelStringInput
  contentCategories: ModelStringInput
  personalValues: ModelStringInput
  contentStyle: ModelStringInput
  audienceAge: ModelStringInput
  audienceGender: ModelStringInput
  and: [ModelProfileConditionInput]
  or: [ModelProfileConditionInput]
  not: ModelProfileConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  owner: ModelStringInput
}

input CreateProfileInput {
  userId: String!
  displayName: String!
  bio: String
  location: String
  website: String
  accountType: ProfileAccountType
  companyName: String
  industry: String
  companySize: String
  brandValues: String
  missionStatement: String
  targetAudience: String
  platforms: String
  followerCount: String
  contentCategories: String
  personalValues: String
  contentStyle: String
  audienceAge: String
  audienceGender: String
  id: ID
}

input UpdateProfileInput {
  userId: String
  displayName: String
  bio: String
  location: String
  website: String
  accountType: ProfileAccountType
  companyName: String
  industry: String
  companySize: String
  brandValues: String
  missionStatement: String
  targetAudience: String
  platforms: String
  followerCount: String
  contentCategories: String
  personalValues: String
  contentStyle: String
  audienceAge: String
  audienceGender: String
  id: ID!
}

input DeleteProfileInput {
  id: ID!
}

input ModelSubscriptionProfileFilterInput {
  userId: ModelSubscriptionStringInput
  displayName: ModelSubscriptionStringInput
  bio: ModelSubscriptionStringInput
  location: ModelSubscriptionStringInput
  website: ModelSubscriptionStringInput
  accountType: ModelSubscriptionStringInput
  companyName: ModelSubscriptionStringInput
  industry: ModelSubscriptionStringInput
  companySize: ModelSubscriptionStringInput
  brandValues: ModelSubscriptionStringInput
  missionStatement: ModelSubscriptionStringInput
  targetAudience: ModelSubscriptionStringInput
  platforms: ModelSubscriptionStringInput
  followerCount: ModelSubscriptionStringInput
  contentCategories: ModelSubscriptionStringInput
  personalValues: ModelSubscriptionStringInput
  contentStyle: ModelSubscriptionStringInput
  audienceAge: ModelSubscriptionStringInput
  audienceGender: ModelSubscriptionStringInput
  id: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionProfileFilterInput]
  or: [ModelSubscriptionProfileFilterInput]
  owner: ModelStringInput
}

type ModelMatchRequestConnection @aws_cognito_user_pools @aws_iam {
  items: [MatchRequest]!
  nextToken: String
}

input ModelMatchRequestStatusInput {
  eq: MatchRequestStatus
  ne: MatchRequestStatus
}

input ModelMatchRequestFilterInput {
  userId: ModelStringInput
  brand: ModelStringInput
  influencer: ModelStringInput
  brandValues: ModelStringInput
  missionStatement: ModelStringInput
  targetEmotion: ModelStringInput
  status: ModelMatchRequestStatusInput
  results: ModelStringInput
  id: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelMatchRequestFilterInput]
  or: [ModelMatchRequestFilterInput]
  not: ModelMatchRequestFilterInput
  owner: ModelStringInput
}

input ModelMatchRequestConditionInput {
  userId: ModelStringInput
  brand: ModelStringInput
  influencer: ModelStringInput
  brandValues: ModelStringInput
  missionStatement: ModelStringInput
  targetEmotion: ModelStringInput
  status: ModelMatchRequestStatusInput
  results: ModelStringInput
  and: [ModelMatchRequestConditionInput]
  or: [ModelMatchRequestConditionInput]
  not: ModelMatchRequestConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  owner: ModelStringInput
}

input CreateMatchRequestInput {
  userId: String!
  brand: String!
  influencer: String!
  brandValues: String
  missionStatement: String
  targetEmotion: String
  status: MatchRequestStatus
  results: String
  id: ID
}

input UpdateMatchRequestInput {
  userId: String
  brand: String
  influencer: String
  brandValues: String
  missionStatement: String
  targetEmotion: String
  status: MatchRequestStatus
  results: String
  id: ID!
}

input DeleteMatchRequestInput {
  id: ID!
}

input ModelSubscriptionMatchRequestFilterInput {
  userId: ModelSubscriptionStringInput
  brand: ModelSubscriptionStringInput
  influencer: ModelSubscriptionStringInput
  brandValues: ModelSubscriptionStringInput
  missionStatement: ModelSubscriptionStringInput
  targetEmotion: ModelSubscriptionStringInput
  status: ModelSubscriptionStringInput
  results: ModelSubscriptionStringInput
  id: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionMatchRequestFilterInput]
  or: [ModelSubscriptionMatchRequestFilterInput]
  owner: ModelStringInput
}
