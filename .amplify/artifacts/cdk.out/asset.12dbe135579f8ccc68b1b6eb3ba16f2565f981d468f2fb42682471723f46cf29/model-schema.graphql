type User @model @auth(rules: [{allow: owner, ownerField: "owner"}])
{
  email: String!
  firstName: String
  lastName: String
  accountType: UserAccountType
  displayName: String
  bio: String
  location: String
  website: String
  companyName: String
  industry: String
  companySize: String
  brandValues: String
  missionStatement: String
  targetAudience: String
  platforms: String
  followerCount: String
  contentCategories: String
  personalValues: String
  contentStyle: String
  audienceAge: String
  audienceGender: String
}

type Profile @model @auth(rules: [{allow: owner, ownerField: "owner"}])
{
  userId: String!
  displayName: String!
  bio: String
  location: String
  website: String
  accountType: ProfileAccountType
  companyName: String
  industry: String
  companySize: String
  brandValues: String
  missionStatement: String
  targetAudience: String
  platforms: String
  followerCount: String
  contentCategories: String
  personalValues: String
  contentStyle: String
  audienceAge: String
  audienceGender: String
}

type MatchRequest @model @auth(rules: [{allow: owner, ownerField: "owner"}])
{
  userId: String!
  brand: String!
  influencer: String!
  brandValues: String
  missionStatement: String
  targetEmotion: String
  status: MatchRequestStatus
  results: String
}

enum UserAccountType {
  brand
  influencer
}

enum ProfileAccountType {
  brand
  influencer
}

enum MatchRequestStatus {
  pending
  processing
  completed
  failed
}