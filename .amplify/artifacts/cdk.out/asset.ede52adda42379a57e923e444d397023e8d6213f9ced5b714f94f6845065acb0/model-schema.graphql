type User @model @auth(rules: [{allow: owner, ownerField: "owner"}])
{
  email: String!
  firstName: String
  lastName: String
  accountType: UserAccountType
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Influencer @model @auth(rules: [{allow: owner, ownerField: "owner"}])
{
  userId: String!
  displayName: String!
  bio: String
  location: String
  website: String
  platforms: String
  followerCount: String
  contentCategories: String
  personalValues: String
  contentStyle: String
  audienceAge: String
  audienceGender: String
  profileImage: String
  isVerified: Boolean @default(value: "false")
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Brand @model @auth(rules: [{allow: owner, ownerField: "owner"}])
{
  userId: String!
  companyName: String!
  displayName: String!
  bio: String
  location: String
  website: String
  industry: String
  companySize: String
  brandValues: String
  missionStatement: String
  targetAudience: String
  logo: String
  isVerified: Boolean @default(value: "false")
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type MatchRequest @model @auth(rules: [{allow: owner, ownerField: "owner"}])
{
  userId: String!
  brandId: String!
  influencerId: String!
  status: MatchRequestStatus
  brandValues: String
  missionStatement: String
  targetEmotion: String
  results: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

enum UserAccountType {
  influencer
  brand
}

enum MatchRequestStatus {
  pending
  processing
  completed
  failed
}